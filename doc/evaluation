#|
Some examples of terms for which the judgement ⇓ holds.
|#

(println "writing a value to a port")
(judgment-holds (⇓ (((port 8080) ((num 30))))
	(out((port 8080) 🡐 (num 10)))
	: μ ) μ)
(judgment-holds (⇓ ()
	(out((port 8080) 🡐 (num 10)))
	: μ ) μ)
(judgment-holds (⇓ (((loc 1) (num 10)))
	(out((port 8080) 🡐 (loc 1)))
	: μ ) μ)

(println "conditional branching")
(judgment-holds (⇓ () 
	(if ((num 0)) 
		{ (out ((port 8080) 🡐 (num 10))) } else 
		{ (out ((port 8080) 🡐 (num 20))) } ) 
	: μ ) μ)
(judgment-holds (⇓ (((loc 1) (num 42))) 
	(if ((loc 1)) 
		{ (out ((port 8080) 🡐 (num 10))) } else 
		{ (out ((port 8080) 🡐 (num 20))) } ) 
	: μ ) μ)

(println "introducing a new variable into the scope")
(judgment-holds (⇓ () 
	(let var "somevar" := (num 10) in (out ((port 8080) 🡐 "somevar")))
	: μ ) μ)

(println "executing two commands in sequence")
(judgment-holds (⇓ () 
	(let var "somevar" := (num 10) in (out ((port 8080) 🡐 "somevar")))
	: μ ) μ)

(println "assigning a expression to a location")
(judgment-holds (⇓ (((loc 1) (num 41))) 
	(((loc 1) := (num 42)) then (out((port 8080) 🡐 (loc 1))))
	: μ ) μ)

(println "while-loop and command sequence with 'then'")
(judgment-holds (⇓ () 
	((out((port 8080) 🡐 (num 10))) then (out((port 8080) 🡐 (num 20))))
	: μ ) μ)
(judgment-holds (⇓ ()
        (let var "y" := (num 30) in ((out((port 8080) 🡐 "y")) then (out((port 8080) 🡐 (num 20)))))  
	: μ ) μ)

(println "addinging two expressions together")
(judgment-holds (⇓ (((loc 1)(num -3))) 
	(let var "somevar" := ((num 32) + (loc 1)) in (out ((port 8080) 🡐 "somevar")))
	: μ ) μ)
